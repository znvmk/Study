添加功能
教程目录

这是 Electron 教程的 第四部分

    基本要求
    创建您的第一个应用程序
    使用预加载脚本
    添加功能
    打包您的应用程序
    发布和更新

增加应用复杂度

如果你一路跟随本教程下来，你应该已经建立了一个拥有静态用户界面的功能性 Electron 程序。 从这里开始，你可以大概从两个大方向上进行开发：

    增加渲染进程的网页应用代码复杂度
    深化与操作系统和 Node.js 的集成

了解这两个大概念之间的区别十分重要。 就第一点而言，Electron 特供的资源是非必要的。 在 Electron 中建立一个漂亮的待办列表只是将你的 Electron BrowserWindow 指向一个漂亮的待办列表网络应用。 说到底，你还是使用在 Web 开发中相同的工具 (HTML, CSS, JavaScript) 来构建你的渲染器 UI。 因此，Electron 的文档不会很详细的探讨如何使用标准的 Web 工具进行开发。

另一方面，Electron 同时提供了丰富的工具集，可以让你和桌面环境整合起来。从建立托盘图标到添加全局的快捷方式，再到显示原生的菜单，都不在话下。 Electron 还赋予你在主进程中访问 Node.js 环境的所有能力。 这组能力使得 Electron 应用能够从浏览器运行网站中脱胎换骨，并且是 Electron 文档的重点。
How-to 示例

Electron 的文档有着许多教程来帮助你处理更高级的主题和更深的操作系统集成。 To get started, check out the How-To Examples doc.
请告诉我们哪里有遗漏！

如果你找不到你想找的东西，请在 GitHub 或者是 Discord 服务器 上告诉我们！
下一步
在教程的剩余部分，我们将从应用代码转向如何让你的应用从开发者的机器上转移到终端用户的手中。

https://www.rust-lang.org/tools/install
1）下载rustup-init.exe（先不运行）
2）配置安装路径
如果希望Rust默认安装则跳过该步骤，若需要安装在其他地方或者不使用默认编译器msvc，则需要添加如下两个环境变量：

CARGO_HOME：cargo的安装路径，本人设置成了D:\Rust\cargo
RUSTUP_HOME：rustc的安装路径，本人设置成了D:\Rust\rustup

3）运行rustup-init.exe
输入 y

   default host triple: x86_64-pc-windows-msvc
     default toolchain: stable
               profile: default
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
>2
出现提示后输入2，则会依次询问安装配置，其中host triple填写为x86_64-pc-windows-gnu，其他直接回车即可；
修改后则变成以下配置：

   default host triple: x86_64-pc-windows-gnu
     default toolchain: stable
               profile: default
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
>1
选择1，运行，安装程序将下载：cargo,clippy,rust-docs,rust-mingw-rust-std,rustc,rustfmt(程序文本格式化命令)
运行Windows Terminal 
rustc --version或rustc -V 查看版本
rustup -V
cargo -V
升级：rustup update
卸载：rustup self uninstall

配置cargo国内源
在C:\Users\Administrator\.cargo目录下，添加“config”文件：
**注意：现在cargo安装目录已经改变，所以要把配置文件放在当前的安装目录D:\Rust\cargo下，否则不起作用
config内容：

[source.crates-io]
registry = "https://github.com/rust-lang/crates.io-index"
replace-with = 'ustc'
[source.ustc]
registry = "git://mirrors.ustc.edu.cn/crates.io-index"

再次运行cargo build，会自动下载所包含的库
其他源：
[source.crates-io]
registry = "https://github.com/rust-lang/crates.io-index"
# 指定镜像
replace-with = '镜像源名' # 如：tuna、sjtu、ustc，或者 rustcc

# 注：以下源配置一个即可，无需全部

# 中国科学技术大学
[source.ustc]
registry = "git://mirrors.ustc.edu.cn/crates.io-index"

# 上海交通大学
[source.sjtu]
registry = "https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index"

# 清华大学
[source.tuna]
registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"

# rustcc社区
[source.rustcc]
registry = "https://code.aliyun.com/rustcc/crates.io-index.git"





WT
$ cargo --version ,cargo -V
$ cargo new hello_cargo
$ cd hello-cargo
$ ls
.git src .gitignore Cargo.lock Cargo.toml
Cargo.lock:程序依赖版本信息
Cargo.toml:作者个人信息
src/main.rs
fn main(){
    println!("Hello, world!);
}

构建Cargo项目
$ cd hello-cargo 
$ cargo build
运行：
$ cargo run 
Hello, world!
或者省略cargo build命令，直接运行cargo rum,构建并运行
$ cargo check
检查项目是否可以运行，指出错误

当然，如果项目文件依赖较少，可进入hello_cargo/target/debug(or release)"./hello_cargo.exe来运行

分布构建（release)
$ cargo build release

清理生成目标内容
$cargo clean


使用 crate 来增加更多功能

记住，crate 是一个 Rust 代码包。我们正在构建的项目是一个 二进制 crate，它生成一个可执行文件。 rand crate 是一个 库 crate，库 crate 可以包含任意能被其他程序使用的代码，但是不能独自执行。

Cargo 对外部 crate 的运用是其真正的亮点所在。在我们使用 rand 编写代码之前，需要修改 Cargo.toml 文件，引入一个 rand 依赖。
打开这个文件并将下面这一行添加到 [dependencies] 表块标题之下。请确保按照我们这里的方式指定 rand 及其这里给出的版本号，否则本教程中的示例代码可能无法工作。

文件名：Cargo.toml
[dependencies]//注，一定在此标记下，否则不识别加载
rand = "0.8.3"

$ cargo update
    Updating `ustc` index
      Adding cfg-if v1.0.0
      Adding getrandom v0.2.6
      Adding libc v0.2.124
      Adding ppv-lite86 v0.2.16
      Adding rand v0.8.5
      Adding rand_chacha v0.3.1
      Adding rand_core v0.6.3
      Adding wasi v0.10.2+wasi-snapshot-preview1


Cargo.lock 文件确保构建是可重现的

Cargo 有一个机制来确保任何人在任何时候重新构建代码，都会产生相同的结果：Cargo 只会使用你指定的依赖版本，除非你又手动指定了别的。
例如，如果下周 rand crate 的 0.8.4 版本出来了，它修复了一个重要的 bug，同时也含有一个会破坏代码运行的缺陷。
为了处理这个问题，Rust 在你第一次运行 cargo build 时建立了 Cargo.lock 文件，我们现在可以在 guessing_game 目录找到它。

更新 crate 到一个新版本

当你确实需要升级 crate 时，Cargo 提供了这样一个命令 update，它会忽略 Cargo.lock 文件，并计算出所有符合 Cargo.toml 声明的最新版本。Cargo 接下来会把这些版本写入 Cargo.lock 文件。不过，Cargo 默认只会寻找大于或等于 0.8.3 而小于 0.9.0 的版本。如果 rand crate 发布了两个新版本，0.8.4 和 0.9.0，在运行 cargo update 时会出现如下内容：

$ cargo update
    Updating crates.io index
    Updating rand v0.8.3 -> v0.8.5
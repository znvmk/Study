rustc(单独编译):
1.在d盘下新建文件夹code/rust/helloworld,编写第一个rust程序：main.rs.
2.编译：rustc main.rs
3.运行：./main.exe         :输出了：Hello World!    成功

cargo（编译项目）:
1.cargo --version   :查看是否安装
PS D:\Git\code\rust\helloworld> cargo --version
cargo 1.27.0 (1e95190e5 2018-05-27)
成功安装
2.
转换到 Cargo
让我们将 Hello World 程序迁移至 Cargo。为了 Cargo 化一个项目，需要做三件事：
将源文件放到正确的目录
删除旧的可执行文件（Windows下是main.exe，其他平台是main）。
创建一个 Cargo 配置文件
让我们开始吧！
创建源文件目录并移除旧的可执行文件
首先，回到你的终端，移动到你的hello_world目录，并输入如下命令：
$ mkdir src
$ move main.rs src/main.rs （powershell:mv main.rs src）
$ del main.exe


创建项目
Cargo hello_world
cd hello_world
gvim Cargo.toml,编辑自己的信息：
[package]
name = "test-1"
version = "0.1.0"
authors = ["name <name@users.noreply.github.com>"]
edition = "2018"

第一行的[package]表明下面的语句用来配置一个包。随着我们在这个文件增加更多的信息，我们会增加其他部分，不过现在，我们只有包配置。
另外三行设置了 Cargo 编译你的程序所需要知道的三个配置：包的名字，版本，和作者。
当你在Cargo.toml中添加完这些信息后，保存它以完成配置文件的创建。
编辑src文件夹中的源文件
完成后构建并运行 Cargo 项目
当Cargo.toml文件位于项目的根目录时，我们就准备好可以构建并运行 Hello World 程序了！为此，我们输入如下命令：
$ cargo build
   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)
$ ./target/debug/hello_world
Hello, world!
如果一切顺利，你应该再次看到Hello, world!出现在终端里。
也可以进入到生成目录target\debug，用命令：.\test-1.exe运行
你刚刚用cargo build构建了一个程序并用./target/debug/hello_world运行了它，不过你也可以用如下的一步操作cargo run来完成这两步操作：
$ cargo run
     Running `target/debug/hello_world`
Hello, world!
run命令在你需要快速迭代项目时显得很有用。
注意这个例子并没有重新构建项目。Cargo 发现文件并没有被修改，所以它只是运行了二进制文件。如果你修改了源文件，Cargo 会在运行前重新构建项目，这样你将看到像这样的输出：
$ cargo run
   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)
     Running `target/debug/hello_world`
Hello, world!
Cargo 检查任何项目文件是否被修改，并且只会在你上次构建后修改了他们才重新构建。
对于简单的项目，Cargo 并不比使用rustc要好多少，不过将来它会变得有用。这在你开始使用 crate 时显得尤为正确；（crate）在其他语言中有“库（library）”或“包（package）”这样的同义词。对于包含多个 crate 的项目，让 Cargo 来协调构建将会轻松很多。有了 Cargo，你可以运行cargo build，而一切将有条不紊的运行。
发布构建
当你的项目准备好发布了，可以使用cargo build --release来优化编译项目。这些优化可以让 Rust 代码运行的更快，不过启用他们会让程序花更长的时间编译。这也是为何这是两种不同的配置，一个为了开发，另一个构建提供给用户的最终程序。
那个Cargo.lock是什么？
运行这个命令同时也会让 Cargo 创建一个叫做Cargo.lock的文件，它看起来像这样：
[root]
name = "hello_world"
version = "0.0.1"
Cargo 用Cargo.lock文件跟踪你程序的依赖。这里是 Hello World 项目的Cargo.lock文件。这个项目并没有依赖，所以内容有一点稀少。事实上，你自己甚至都不需要碰这个文件；仅仅让 Cargo 处理它就行了。
就是这样！如果你一路跟过来了，你应该已经成功使用 Cargo 构建了hello_world。
虽然这个项目很简单，现在它使用了很多在你余下的 Rust 生涯中将会用到的实际的工具。事实上，你可以期望使用如下命令的变体开始所有的 Rust 项目：
$ git clone someurl.com/foo
$ cd foo
$ cargo build

创建新 Cargo 项目的简单方法
你并不需要每次都过一遍上面的操作来开始一个新的项目！Cargo 可以快速创建一个骨架项目目录这样你就可以立即开始开发了。
用 Cargo 来开始一个新项目，在命令行输入cargo new：
$ cargo new hello_world --bin
这个命令传递了--bin参数因为我们的目标是直接创建一个可执行程序，而不是一个库。可执行文件通常叫做二进制文件（因为它们位于/usr/bin，如果你使用 Unix 系统的话）。
Cargo 为我们创建了两个文件和一个目录：一个Cargo.toml和一个包含了main.rs文件的src目录。这应该看起来很眼熟，他们正好是我们在之前手动创建的那样。
这些输出是你开始所需要的一切。首先，打开Cargo.toml。它应该看起来像这样：
[package]

name = "hello_world"
version = "0.1.0"
authors = ["Your Name <you@example.com>"]

[dependencies]
不要担心[dependencies]那一行，之后我们会讲到。
Cargo 已经根据你给出的参数和git全局配置给出了合理的默认配置。你可能会注意到 Cargo 也把hello_world目录初始化为了一个git仓库。
这是应该写入src/main.rs的代码：
fn main() {
    println!("Hello, world!");
}
Cargo 已经为你生成了一个“Hello World!”，现在你已经准备好开始撸代码了！

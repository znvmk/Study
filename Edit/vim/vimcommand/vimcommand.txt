vim的模式

普通模式：
插入模式：按i,I,a,A,o,O进入插入模式，按ESC返回普通模式
可视模式：按v,V进入，按ESC返回普通模式
命令模式：按ESC返回普通模式
选择模式：这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。
命令行模式：按：进入，在执行完命令后返回普通模式，或者直接按ESC返回普通模式
按ESC返回普通模式
Ex模式：这和命令行模式比较相似，在使用:visual命令离开Ex模式前，可以一次执行多条命令




窗口操作
:winpos 750 0 :移动当前窗口到指定位置(X,Y)




移动光标

按Esc进入普通模式，在该模式下使用方向键或者h,j,k,l键（左下上右）可以移动游标。
k,Ctrl+p：上，
j,Ctrl+n:下，
gj: 移动到一段内的下一行；
gk: 移动到一段内的上一行；
Enter:光标下移一行
h,Backspqce:左，
l，space:右。键盘方向键上下左右也可以操作
w:将光标移动到下个单词的首字符上
3w:将光标向前移动三个单词
b:将光标移动到前一个单词的首字符上
e:移动到下个字的最後一个字母
w: 前移一个单词，光标停在下一个单词开头；
W: 移动下一个单词开头，但忽略一些标点；
e: 前移一个单词，光标停在下一个单词末尾；
E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；
b: 后移一个单词，光标停在上一个单词开头；
B: 移动到上一个单词开头，忽略一些标点；
ge: 后移一个单词，光标停在上一个单词末尾；
gE: 同 ge ，不过‘单词’包含单词相邻的标点。
) ：光标移至句尾
( ：光标移至句首
}：光标移至段落最后一个字母
{：光标移至段落第一个字母
n<space>:光标向后移动20字符距离
n<Enter>:光标向下移动n行
nG：光标移至第n行首
n+：光标下移n行
n-：光标上移n行
n$：光标移至第n行尾
fc: 把光标移到同一行的下一个c字符处
Fc: 把光标移到同一行的上一个c字符处
tc: 把光标移到同一行的下一个c字符前
Tc: 把光标移到同一行的上一个c字符后
;: 配合f & t使用，重复一次
,: 配合f & t使用，反向重复一次
上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。

移动到行首或行尾
0: 移动到行首。
g0: 移到光标所在屏幕行行首。
^: 移动到本行第一个非空白字符。
g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。
$:将光标移动到当前行行尾
1$,2$:将光标移动到当前行，下一行，或第三行的行尾
g$: 移动光标所在屏幕行行尾。
n|: 把光标移到递n列上。
nG: 到文件第n行。
:n<cr> 移动到第n行。
:$<cr> 移动到最后一行。
H: 把光标移到屏幕最顶端一行。
M: 把光标移到屏幕中间一行。
L: 把光标移到屏幕最底端一行。
gg: 到文件头部。
G: 到文件尾部。
 翻屏
ctrl+f: 下翻一屏。
ctrl+b: 上翻一屏。
ctrl+d: 下翻半屏。
ctrl+u: 上翻半屏。
ctrl+e: 向下滚动一行。
ctrl+y: 向上滚动一行。
n%: 到文件n%的位置。
zz: 将当前行移动到屏幕中央。
zt: 将当前行移动到屏幕顶端。
zb: 将当前行移动到屏幕底端。
4.3 标记
使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。

m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。
m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。
`{a-z}: 移动到标记位置。
'{a-z}: 移动到标记行的行首。
`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。
``: 移动到上次编辑的位置。''也可以，不过``精确到列，而''精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。
`": 移动到上次离开的地方。
`.: 移动到最后改动的地方。
:marks 显示所有标记。
:delmarks a b -- 删除标记a和b。
:delmarks a-c -- 删除标记a、b和c。
:delmarks a c-f -- 删除标记a、c、d、e、f。
:delmarks! -- 删除当前缓冲区的所有标记。
:help mark-motions 查看更多关于mark的知识。
+,Enter:移至下一列的第一个字元处。
- :移至上一列的第一个字元处。
:n:移至该文件的第 n 列。
n+:移至游标所在位置之后的第 n 列。
n-:移至游标所在位置之前的第 n 列。
<Ctrl><g>  显示该行之行号、文件名称、文件中最末行之行号、游标所在行号占总行号之百分比。

g+e b w 
G+E B W 

gj: 移动到一段内的下一行；
gk: 移动到一段内的上一行；

移动到指定字符上
fx:在当前行上查找下一个字符x（向右方向），可以带一个命令计数"F"命令向左方向搜索
tx:命令形同"fx"命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示："t"意为"To"。该命令的反方向版是"Tx"。
fx,Fx,tx,Tx:这4个命令都可以用";"来重复。以","也是重复同样的命令，但是方向与原命令的方向相反。

以匹配一个括号为目的移动
%:以匹配一个括号为目的移动。用命令"%"跳转到与当前光标下的括号相匹配的那一个括号上去。如果当前光标在"("上，它就向前跳转到与它匹配的")"上，如果当前在")"上，它就向后自动跳转到匹配的"("上去.

移动到指定行
G:把光标定位到最后一行上。
33G:就会把光标置于第33行上。
gg:命令是跳转到第一行
50%:将会把光标定位在文件的中间. 
90%:跳到接近文件尾的地方。
H:将光标跳转到第一行
M:将光标跳转到中间行
L:将光标跳转到结尾行

Operator + Scope = command

告诉你当前的位置
CTRL-G告诉你当前的位置
:set number:在每行的前面显示一个行号
:set nonumber:关闭行号
:set ruler:在Vim窗口的右下角显示当前光标位置。



插入

普通模式下
i:命令可以在当前光标之前插入文本。
一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。

I: 在当前行第一个非空字符前插入；
gI: 在当前行第一列插入；
a: 在光标后插入；
a!!!,3a!:在行尾添加三个！
A: 在当前行最后插入；
o: 在下面新建一行插入；
O: 在上面新建一行插入；
:r filename在当前位置插入另一个文件的内容。
:[n]r filename在第n行插入另一个文件的内容。
:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。
c[n]w: 改写光标后1(n)个词。
c[n]l: 改写光标后n个字母。
c[n]h: 改写光标前n个字母。
[n]cc: 修改当前[n]行。
[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。
[n]S: 删除指定数目的行，并以所输入文本代替之。
注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。



删除

进入普通模式，使用下列命令可以进行文本快速删除：
x:删除游标所在的字符
2x,3x:删除2个，3个，或多个字符
X:删除游标所在的前一个字符
Delete:同x
d: 删除（剪切）在可视模式下选中的文本。
dd:删（剪切）除整行
dw:删除游标所在的一个单词（不适用于中文）
d4w:删除4个word
类似有"d2e"、"d$"。此类命令有一个固定的模式：操作符命令+位移命令。首先键入一个操作符命令。比如"d"是一个删除操作符。接下来是一个位移命。比如"w"。这样任何移动光标命令所及之处，都是命令的作用范围。

命令"3dw"和"d3w"都是删除3个word。第一个命令"3dw"可以看作是删除一个word的操作执行3次；第二个命令"d3w"是一次删除3个word。这是其中不明显的差异。事实上你可以在两处都放上命令记数，比如，"3d2w"是删除两个word，重复执行3次，总共是6个word。

d[n]w: 删除（剪切）1(n)个单词
d[n]l: 删除（剪切）光标右边1(n)个字符。
d[n]h: 删除（剪切）光标左边1(n)个字符。
d0: 删除（剪切）当前位置到行首的内容
[n] dd: 删除（剪切）1(n)行。
:m,nd<cr> 剪切m行到n行的内容。
d1G或dgg: 剪切光标以上的所有行。
dG: 剪切光标以下的所有行。
daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。
d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。
d$,D:删除至行尾
d^: 删除至行首
ds：从当前光标处删除至行末
dG:删除至文档结尾
d1G:删除至文档开头
J:删除换行符，即把两行合并为一行
2dd,3dd:删除2行，3行，或多行
diw: 删除当前光标所在的word(不包括空白字符) 
daw: 删除当前光标所在的word(包括空白字符)
:10,20d   删除第10行至第20行的资料。
:10d   删除第10行的资料。
:%d   删除整个编辑缓冲区。
s:删除游标所在之字元，并进入输入模式直到《ESC》。
S:删除游标所在之该行资料，并进入输入模式直到《ESC》。
Ctrl+u：删除输入方式下所输入的文本
关于命令和对象
删除命令d的格式如下：
[number] d object 或者 d [number] object
其意如下：
	number:代表执行命令的次数（可选项，缺省设置为1）。
	d:删除。
	object:命令所要操作的对象。
一个简短的对象列表：
	w：从光标当前的位置至单词末尾，包括空格。
	e: 从光标当前的位置至单词末尾，但是不包括空格。
	s: 从光标当前的位置至行末。
	
	
	
复制文本（VIM编辑器内复制）

[n]x: 剪切光标右边n个字符，相当于d[n]l。
[n]X: 剪切光标左边n个字符，相当于d[n]h。
y: 复制在可视模式下选中的文本,会默认把文本复制到一个寄存器中。
yw:复制一个word. 同样可以使用命令记数
y2w:复制两个word
yy,Y:复制一整行
y$:复制当前光标至行尾
+y: 复制到系统剪贴板(也就是vim的+寄存器）
y[n]w: 复制一(n)个词。
y[n]l: 复制光标右边1(n)个字符。
y[n]h: 复制光标左边1(n)个字符。
y$: 从光标当前位置复制到行尾。
y0: 从光标当前位置复制到行首。
:m,ny<cr> 复制m行到n行的内容。
y1G或ygg: 复制光标以上的所有行。
yG: 复制光标以下的所有行。
yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系
粘贴
p:默认从"寄存器取出内容粘贴, 在光标之后粘贴。
+p:从系统剪贴板粘贴。如下例中用"，"
P: 在光标之前粘贴。
:10,20co30  将第10行至第20行的资料复制至第30行之后。
:10,20mo30  将第10行至第20行的资料搬移至第30行之后。
	
	
	
修改

操作符命令是"c"，改变命令。它的行为与"d"命令类似，不过在命令执行后会进入Insert模式。比如"cw"改变一个word。或者，更准确地说，它删除一个word并让你置身于Insert模式。
cc：命令可以改变整行。不过仍保持原来的缩进。
ncw或nCW：修改指定数目的字
nCC：修改指定数目的行
"c$"改变当前光标到行尾的内容。
  快捷命令：x 代表dl(删除当前光标下的字符)
            X 代表dh(删除当前光标左边的字符)
            D 代表d$(删除到行尾的内容)
            C 代表c$(修改到行尾的内容)
            s 代表cl(修改一个字符)
            S 代表cc(修改一整行)

替换单个字符
"r"命令不是一个操作符命令。它等待你键入下一个字符用以替换当前光标下的那个字符。"r"命令前辍以一个命令记数是将多个字符都替换为即将输入的那个字符。要把一个字符替换为一个换行符使用"r"。它会删除一个字符并插入一个换行符。在此处使用命令记数只会删除指定个数的字符："4r"将把4个字符替换为一个换行符。
r    用接於此指令之后的字元取代(replace)游标所在字元。如：ra将游标所在字元以 a 取代之。
R    进入取代状态，直到《ESC》为止。

重复改动
"."命令会重复上一次做出的改动。"."命令会重复你做出的所有修改，除了"u"命令CTRL-R和以冒号开头的命令。"."需要在Normal模式下执行，它重复的是命令，而不是被改动的内容




移动文本
  以"d"或"x"这样的命令删除文本时，被删除的内容还是被保存了起来。你还可以用p命令把它取回来。"P"命令是把被去回的内容放在光标之前，"p"则是放在光标之后。对于以"dd"删除的整行内容，"P"会把它置于当前行的上一行。"p"则是至于当前行的后一行。也可以对命令"p"和"P"命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来"dd"之后的"3p"就可以把被删除行的3 份副本放到当前位置。
  命令"xp"将光标所在的字符与后一个字符交换。


撤销

u:撤销上一次操作，可连续撤销
U:一次撤销对一行的全部操作
Ctrl+R：重做，可反转撤销，用来取消撤销命令
? :取消前一动作(Undo)
选择
普通模式下按"v"可以进入Visual模式。移动光标以覆盖你想操纵的文本范围。同时被选中的文本会以高亮显示。最后键入操作符命令。
v  从光标当前位置开始，光标所经过的地方会被选中，再按一下v结束。 
V  从光标当前行开始，光标经过的行都会被选中，再按一下Ｖ结束。 
Ctrl + v 从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束。 
ggVG ：选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾
选中后就可以用编辑命令对其进行编辑




查找与替换
/pattern：从光标开始处向文件尾搜索pattern
?pattern：从光标开始处向文件首搜索pattern
n：在同一方向重复上一次搜索命令
N：在反方向上重复上一次搜索命令
%   查找“(”，“)”，“{”，“}”的配对符。
s   搜寻某行列范围。
g   搜寻整个编辑缓冲区的资料。
:1,$s/old/new/g 将文件中所有的『old』改成『new』。
:10,20s/^/ /  将第10行至第20行资料的最前面插入5个空白。
(vim) 
/字符串   后边输入查询内容可保存至缓冲区中，可用↑↓进行以往内容选择。
另外：将光标移动在选定单词下方按*，则可以选中此单词作为查询字符，可以避免输入一长串字符的麻烦。
：s/p1/p2/g：将当前行中所有p1均用p2替代
：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代
：g/p1/s//p2/g：将文件中所有p1均用p2替换
在VIM中进行文本替换：
 
    1.  替换当前行中的内容：    :s/from/to/    （s即substitude）
        :s/from/to/     ：  将当前行中的第一个from，替换成to。如果当前行含有多个
                            from，则只会替换其中的第一个。
        :s/from/to/g    ：  将当前行中的所有from都替换成to。
        :s/from/to/gc   ：  将当前行中的所有from都替换成to，但是每一次替换之前都
                            会询问请求用户确认此操作。
 
        注意：这里的from和to都可以是任何字符串，其中from还可以是正则表达式。
 
    2.  替换某一行的内容：      :33s/from/to/g
        :.s/from/to/g   ：  在当前行进行替换操作。
        :33s/from/to/g  ：  在第33行进行替换操作。
        :$s/from/to/g   ：  在最后一行进行替换操作。
 
    3.  替换某些行的内容：      :10,20s/from/to/g
        :10,20s/from/to/g   ：  对第10行到第20行的内容进行替换。
        :1,$s/from/to/g     ：  对第一行到最后一行的内容进行替换（即全部文本）。
        :1,.s/from/to/g     ：  对第一行到当前行的内容进行替换。
        :.,$s/from/to/g     ：  对当前行到最后一行的内容进行替换。
        :'a,'bs/from/to/g   ：  对标记a和b之间的行（含a和b所在的行）进行替换。
                                其中a和b是之前用m命令所做的标记。
 
    4.  替换所有行的内容：      :%s/from/to/g
        :%s/from/to/g   ：  对所有行的内容进行替换。
 
    5.  替换命令的完整形式：    :[range]s/from/to/[flags]
        5.1 s/from/to/
            把from指定的字符串替换成to指定的字符串，from可以是正则表达式。
        5.2 [range]
            有以下一些表示方法：
            不写range   ：  默认为光标所在的行。
            .           ：  光标所在的行。
            1           ：  第一行。
            $           ：  最后一行。
            33          ：  第33行。
            'a          ：  标记a所在的行（之前要使用ma做过标记）。
            .+1         ：  当前光标所在行的下面一行。
            $-1         ：  倒数第二行。（这里说明我们可以对某一行加减某个数值来
                            取得相对的行）。
            22,33       ：  第22～33行。
            1,$         ：  第1行 到 最后一行。
            1,.         ：  第1行 到 当前行。
            .,$         ：  当前行 到 最后一行。
            'a,'b       ：  标记a所在的行 到标记b所在的行。
 
            %           ：  所有行（与 1,$ 等价）。
 
            ?chapter?   ：  从当前位置向上搜索，找到的第一个chapter所在的行。（
                            其中chapter可以是任何字符串或者正则表达式。
            /chapter/   ：  从当前位置向下搜索，找到的第一个chapter所在的行。（
                            其中chapter可以是任何字符串或者正则表达式。
 
            注意，上面的所有用于range的表示方法都可以通过 +、- 操作来设置相对偏
            移量。
 
        5.3 [flags]
            这里可用的flags有：
 
            无      ：  只对指定范围内的第一个匹配项进行替换。
            g       ：  对指定范围内的所有匹配项进行替换。
            c       ：  在替换前请求用户确认。
            e       ：  忽略执行过程中的错误。
 
            注意：上面的所有flags都可以组合起来使用，比如 gc 表示对指定范围内的
            所有匹配项进行替换，并且在每一次替换之前都会请用户确认。
选项设置
all：列出所有选项设置情况
term：设置终端类型
ignorance：在搜索中忽略大小写
list：显示制表位(Ctrl+I)和行尾标志（$)
number：显示行号
report：显示由面向行的命令修改过的数目
terse：显示简短的警告信息
warn：在转到别的文件时若没保存当前文件则显示NO write信息
nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符
nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始
mesg：允许vi显示其他用户用write写到自己终端上的信息
最后行方式命令
：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下
：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下
：n1,n2 d ：将n1行到n2行之间的内容删除
：w ：保存当前文件
：e filename：打开文件filename进行编辑
：x：保存当前文件并退出
：q：退出vi
：q!：不保存文件并退出vi
：!command：执行shell命令command
：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入
：r!command：将命令command的输出结果放到当前行
寄存器操作
?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字
?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字
?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字
?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字
ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。
tags 用法
在函数中移动光标
[{ 转到上一个位于第一列的{
}] 转到下一个位于第一列的{
{ 转到上一个空行
} 转到下一个空行 （[ and ] 也分别是两个指令）
ctrl+t 跳回
gd 转到当前光标所指的局部变量的定义
* 转到当前光标所指的单词下一次出现的地方
# 转到当前光标所指的单词上一次出现的地方
Vim 的创造者是一名计算机程序员，因此这就不奇怪 Vim 中有许多帮助编写程序的功能：
跳转到标识符被定义和使用的地方；在另一个窗口中预览有关的声明等等。

(vim) 大小写替换
首先用按v开启选择功能，然后用↑↓←→键来选定所要替换的字符，若是小写变大写，则按U;反之按u;
如果是选择单词，则可以在按v后，按w，最后按U/u,这样就可以将字符随意的改变大小写了，而不用删除后重新敲入。

资料的连接
J    句子的连接。将游标所在之下一行连接至游标该行的后面。

环境的设定
:set all  可设置的环境变量列表
:set   环境变量的当前值
:set nu   设定资料的行号。
:set nonu  取消行号设定。
:set ai   自动内缩。
:set noai   取消自动内缩。
(vim) 
:set ruler  会在屏幕右下角显示当前光标所处位置，并随光移动而改变，占用屏幕空间较小，使用也比较方便，推荐使用。
:set hlsearch 在使用查找功能时，会高亮显示所有匹配的内容。
:set nohlsearch  关闭此功能。
:set incsearch  使Vim在输入字符串的过程中，光标就可定位显示匹配点。
:set nowrapscan 关闭查找自动回环功能，即查找到文件结尾处，结束查找；默认状态是自动回环




文档操作

打开
vim后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。
打开Xfce终端，输入以下命令
$ vim practice_1.txt
直接使用vim也可以打开vim编辑器，但是不会打开任何文件。
vim -c cmd file: 在打开文件前，先执行指定的命令；
vim -r file: 恢复上次异常退出的文件；
vim -R file: 以只读的方式打开文件，但可以强制保存；
vim -M file: 以只读的方式打开文件，不可以强制保存；
vim -y num file: 将编辑窗口的大小设为num行；
vim + file: 从文件的末尾开始；
vim +num file: 从第num行开始；
vim +/string file: 打开file，并将光标停留在第一个找到的string上。
vim --remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim --remote file在已有的gvim中打开文件。
vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处
vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename
vi filename....filename ：打开多个文件，依次进行编辑
:edit foo.txt，也可简写为 :e foo.txt：编辑另一个文件
:next(:n)编辑下一个文件。
:2n 编辑下2个文件。
:previous或:N编辑上一个文件。
:wnext，保存当前文件，并编辑下一个文件。
:wprevious，保存当前文件，并编辑上一个文件。
:args 显示文件列表。
:n filenames或:args filenames 指定新的文件列表。
vi -o filenames 在水平分割的多个窗口中编辑多个文件。
vi -O filenames 在垂直分割的多个窗口中编辑多个文件。

关闭
:e file --关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。
:e! file --放弃对当前文件的修改，编辑新的文件。
:e+file -- 开始新的文件，并从文件尾开始编辑。
:e+n file -- 开始新的文件，并从第n行开始编辑。
:enew --编译一个未命名的新文档。(CTRL-W n)
:e -- 重新加载当前文档。
:e! -- 重新加载当前文档，并丢弃已做的改动。
:e#或ctrl+^ -- 回到刚才编辑的文件，很实用。
:10,20w test  将第10行至第20行的资料写入test文件。
:10,20w>>test 将第10行至第20行的资料加在test文件之后。
:r test   将test文件的资料读入编辑缓冲区的最后。
:f或ctrl+g -- 显示文档名，是否修改，和光标位置。
:f filename -- 改变编辑的文件名，这时再保存相当于另存为。
gf -- 打开以光标所在字符串为文件名的文件。

保存
从普通模式输入:进入命令行模式
:w：保存文档。
:w <文件路径+名称格式>：可以将文档另存为其他文件名或存到其它路径下
:n1,n2w filename -- 选择性保存从某n1行到另n2行的内容。
:q:退出
:q!:强制退出，不保存
:wq：保存退出 
:wq!:强制保存退出
:wq <文件路径+名称格式>：F:/TXT/vim命令操作大全.txt 
:saveas：另存为
:x:保存并退出
（注意—— :X 是文件加密，一定要与:x存盘退出相区别）
:ZZ(Shift+zz)：如果文件有改动，则保存退出，如果文件无改动，则直接退出
? 删除与修改
:wq -- 保存并退出。
ZZ -- 保存并退出。
:x -- 保存并退出。
:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)
:saveas newfilename -- 另存为
:browse e -- 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：
:set browsedir=last -- 用上次访问过的目录（默认）；
:set browsedir=buffer -- 用当前文件所在目录；
:set browsedir=current -- 用当前工作目录；
:Sex -- 水平分割一个窗口，浏览文件系统；
:Vex -- 垂直分割一个窗口，浏览文件系统；









查找

/something: 在后面的文本中查找something。
?something: 在前面的文本中查找something。
/pattern/+number: 将光标停在包含pattern的行后面第number行上。
/pattern/-number: 将光标停在包含pattern的行前面第number行上。
n: 向后查找下一个。
N: 向前查找下一个。
可以用grep或vimgrep查找一个模式都在哪些地方出现过，
其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。
用法为： :vim[grep]/pattern/[g] [j] files
g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。
j的含义是grep结束后，结果停在第j项，默认是停在第一项。
vimgrep前面可以加数字限定搜索结果的上限，如
:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。
 
其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。
比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：
:vim/^d{1,}./ %
然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，
就更像个目录了。

/string:命令可用于搜索一个字符串。要查找上次查找的字符串的下一个位置,使用"n"命令。如果你知道你要找的确切位置是目标字符串的第几次出现，还可以在"n"之前放置一个命令计数。"3n"会去查找目标字符串的第3次出现。
  "?"命令与"/"的工作相同，只是搜索方向相反.
"N"命令会重复前一次查找，但是与最初用"/"或"?"指定的搜索方向相反。
  如果查找内容忽略大小写，则用命令"set ignorecase",
 返回精确匹配用命令"set noignorecase" 。
在文本中查找下一个word
  把光标定位于这个word上然后按下"*"键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。"#"命令是"*"的反向版。还可以在这两个命令前加一个命令计数:"3*"查找当前光标下的word的第三次出现。

查找整个word
  如果你用"/the"来查找Vim也会匹配到"there"。要查找作为独立单词的"the"使用如下命令："/the\>"。"\>"是一个特殊的记法，它只匹配一个word的结束处。近似地，"\<"匹配到一个word的开始处。这样查找作为一个word的"the"就可以用:"/\"。

高亮显示搜索结果
  开启这一功能用":set hlsearch"，关闭这一功能：":set nohlsearch"。如果只是想去掉当前的高亮显示，可以使用下面的命令：":nohlsearch"(可以简写为noh)。

匹配一行的开头与结尾
   ^ 字符匹配一行的开头。$字符匹配一行的末尾。
   所以"/was$"只匹配位于一行末尾的单词was，所以"/^was"只匹配位于一行开始的单词was。

匹配任何的单字符
  .这个字符可以匹配到任何字符。比如"c.m"可以匹配任何前一个字符是c，后一个字符是m的情况，不管中间的字符是什么。

匹配特殊字符
  放一个反斜杠在特殊字符前面。如果你查找"ter。"，用命令"/ter\。"

使用标记
  当你用"G"命令从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用命令" `` "可以使你跳回到刚才的出发点。
  ``命令可以在两点之间来回跳转。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older). CTRL-I则是跳回到后来停置光标的更新的位置(提示：I在键盘上位于O前面)。
    注:使用CTRL-I 与按下键一样。

具名标记
   命令"ma"将当前光标下的位置名之为标记"a"。从a到z一共可以使用26个自定义的标记。要跳转到一个你定义过的标记，使用命令" `marks "marks就是定义的标记的名字。命令" 'a "使你跳转到a所在行的行首，" `a "会精确定位a所在的位置。命令：":marks"用来查看标记的列表。
  命令delm！删除所有标记。

将光标
将光标
将光标
提示：如果你不敢确定按下的字母，请按下<Esc>键回到正常（Normal）模式。




替换

:s/old/new - 用new替换当前行第一个old。
:s/old/new/g - 用new替换当前行所有的old。
:n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。
:%s/old/new/g - 用new替换文件中所有的old。
:%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。
:%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。
所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。
还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，
语法为 :[range]g/pattern/command
例如 :%g/^ xyz/normal dd。
表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。
关于range的规定为：

如果不指定range，则表示当前行。
m,n: 从m行到n行。
0: 最开始一行（可能是这样）。
$: 最后一行
.: 当前行
%: 所有行
7.3 正则表达式
高级的查找替换就要用到正则表达式。

\d: 表示十进制数（我猜的）
\s: 表示空格
\S: 非空字符
\a: 英文字母
\|: 表示 或
\.: 表示.
{m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a\{m,n} 表示m 到n个英文字母。
{m,}: 表示m到无限多个字符。
**: 当前目录下的所有子目录。
:help pattern得到更多帮助。




排版

<< 向左缩进一个shiftwidth
>> 向右缩进一个shiftwidth
:ce(nter) 本行文字居中
:le(ft) 本行文字靠左
:ri(ght) 本行文字靠右
gq 对选中的文字重排，即对过长的文字进行断行
gqq 重排当前行
gqnq 重排n行
gqap 重排当前段
gqnap 重排n段
gqnj 重排当前行和下面n行
gqQ 重排当前段对文章末尾
J 拼接当前行和下一行
gJ 同 J ，不过合并后不留空格。
8.2 拼写检查
:set spell－开启拼写检查功能
:set nospell－关闭拼写检查功能
]s－移到下一个拼写错误的单词
[s－作用与上一命令类似，但它是从相反方向进行搜索
z=－显示一个有关拼写错误单词的列表，可从中选择
zg－告诉拼写检查器该单词是拼写正确的
zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的
8.3 统计字数
g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。


文本对象
aw：一个词
as：一句。
ap：一段。
ab：一块（包含在圆括号中的）。
y, d, c, v都可以跟文本对象。





寄存器
a-z：都可以用作寄存器名。"ayy把当前行的内容放入a寄存器。
A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如"Ayy把当前行的内容追加到a寄存器中。
:reg 显示所有寄存器的内容。
""：不加寄存器索引时，默认使用的寄存器。
"*：当前选择缓冲区，"*yy把当前行的内容放入当前选择缓冲区。
"+：系统剪贴板。"+yy把当前行的内容放入系统剪贴板。



多标签编辑
vim -p files: 打开多个文件，每个文件占用一个标签页。
:tabe, tabnew -- 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。
^w gf -- 在新的标签页里打开光标下路径指定的文件。
:tabn -- 切换到下一个标签。Control + PageDown，也可以。
:tabp -- 切换到上一个标签。Control + PageUp，也可以。
[n] gt -- 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。
:tab split -- 将当前缓冲区的内容在新页签中打开。
:tabc[lose] -- 关闭当前的标签页。
:tabo[nly] -- 关闭其它的标签页。
:tabs -- 列出所有的标签页和它们包含的窗口。
:tabm[ove] [N] -- 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。
9.3 缓冲区
:buffers或:ls或:files 显示缓冲区列表。
ctrl+^：在最近两个缓冲区间切换。
:bn -- 下一个缓冲区。
:bp -- 上一个缓冲区。
:bl -- 最后一个缓冲区。
:b[n]或:[n]b -- 切换到第n个缓冲区。
:nbw(ipeout) -- 彻底删除第n个缓冲区。
:nbd(elete) -- 删除第n个缓冲区，并未真正删除，还在unlisted列表中。
:ba[ll] -- 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。

文件列表
  可以在启动Vim时就指定要编辑多个文件，用命令"vim one.c two.c three.c"。Vim将在启动后只显示第一个文件，完成该文件的编辑后，可以用令：":next"或":n"要保存工作成果并继续下一个文件的编辑，命令：":wnext"或":wn"可以合并这一过程。

显示当前正在编辑的文件
  用命令":args"。

移动到另一个文件
  用命令":previous" ":prev"回到上一个文件,合并保存步骤则是":wprevious" ":wprev"。要移到最后一个文件":last",到第一个":first".不过没有":wlast"或者":wfirst"这样的命令。可以在":next"和":previous"命令前面使用一个命令计数。

编辑另一个文件列表
  不用重新启动Vim，就可以重新定义一个文件列表。命令":args five.c six.c seven.h"定义了要编辑的三个文件。

自动存盘
  命令":set autowrite","set aw"。自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行。
  命令":set autowriteall","set awa"。和 'autowrite' 类似，但也适用于":edit"、":enew"、":quit"、":qall"、":exit"、":xit"、":recover" 和关闭 Vim 窗口。置位本选项也意味着 Vim 的行为就像打开 'autowrite' 一样。

切换到另一文件
  要在两个文件间快速切换，使用CTRL-^。

文件标记
  以大写字母命名的标记。它们是全局标记，它们可以用在任何文件中。比如，正在编辑"fab1.Java",用命令"50%mF"在文件的中间设置一个名为F的标记。然后在"fab2.java"文件中，用命令"GnB"在最后一行设置名为B的标记。在可以用"F"命令跳转到文件"fab1.java"的半中间。或者编辑另一个文件，"'B"命令会再把你带回文件"fab2.java"的最后一行。
  要知道某个标记所代表的位置是什么，可以将该标记的名字作为"marks"命令的参数":marks M"或者连续跟上几个参数":marks MJK"
  可以用CTRL-O和CTRL-I可以跳转到较早的位置和靠后的某位置。

查看文件
  仅是查看文件，不向文件写入内容，可以用只读形式编辑文件。用命令：
vim -R file。如果是想强制性地避免对文件进行修改，可以用命令：
vim -M file。

更改文件名
  将现有文件存成新的文件，用命令":sav(eas) move.c"。如果想改变当前正在编辑的文件名，但不想保存该文件，就可以用命令：":f(ile) move.c"。

分屏编辑
vim -o file1 file2:水平分割窗口，同时打开file1和file2
vim -O file1 file2:垂直分割窗口，同时打开file1和file2
10.1 水平分割
:split(:sp) -- 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。
:split filename -- 水平分割窗口，并在新窗口中显示另一个文件。
:nsplit(:nsp) -- 水平分割出一个n行高的窗口。
:[N]new -- 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)
ctrl+w f --水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。
C-w C-^ -- 水平分割一个窗口，打开刚才编辑的文件。
10.2 垂直分割
:vsplit(:vsp) -- 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)
:[N]vne[w] -- 垂直分割出一个新窗口。
:vertical 水平分割的命令： 相应的垂直分割。
10.3 关闭子窗口
:qall -- 关闭所有窗口，退出vim。
:wall -- 保存所有修改过的窗口。
:only -- 只保留当前窗口，关闭其它窗口。(CTRL-W o)
:close -- 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )
10.4 调整窗口大小
ctrl+w + --当前窗口增高一行。也可以用n增高n行。
ctrl+w - --当前窗口减小一行。也可以用n减小n行。
ctrl+w _ --当前窗口扩展到尽可能的大。也可以用n设定行数。
:resize n -- 当前窗口n行高。
ctrl+w = -- 所有窗口同样高度。
n ctrl+w _ -- 当前窗口的高度设定为n行。
ctrl+w < --当前窗口减少一列。也可以用n减少n列。
ctrl+w > --当前窗口增宽一列。也可以用n增宽n列。
ctrl+w | --当前窗口尽可能的宽。也可以用n设定列数。
10.5 切换和移动窗口
如果支持鼠标，切换和调整子窗口的大小就简单了。

ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。
ctrl+w p: 切换到前一个窗口。
ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。
ctrl+w t(b):切换到最上（下）面的窗口。<BR>
ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。
ctrl+w r：旋转窗口的位置。
ctrl+w T: 将当前的窗口移动到新的标签页上。

全屏命令
simalt ~:显示全屏命令
simalt ~x:最大化窗口
simalt ~n:最小化窗口
simalt ~r:还原窗口
simalt ~m:移动当前窗口
simalt ~c:关闭窗口（或者Alt+F4,或者q,q!,wq）


11. 快速编辑
11.1 改变大小写
~: 反转光标所在字符的大小写。
可视模式下的U或u：把选中的文本变为大写或小写。
gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。
11.2 替换（normal模式）
r: 替换光标处的字符，同样支持汉字。
R: 进入替换模式，按esc回到正常模式。
11.3 撤消与重做（normal模式）
[n] u: 取消一(n)个改动。
:undo 5 -- 撤销5个改变。
:undolist -- 你的撤销历史。
ctrl + r: 重做最后的改动。
U: 取消当前行中所有的改动。
:earlier 4m -- 回到4分钟前
:later 55s -- 前进55秒
11.4 宏
. --重复上一个编辑动作
qa：开始录制宏a（键盘操作记录）
q：停止录制
@a：播放宏a
12. 编辑特殊文件
12.1 文件加解密
vim -x file: 开始编辑一个加密的文件。
:X -- 为当前文件设置密码。
:set key= -- 去除文件的密码。
这里是 滇狐总结的比较高级的vi技巧。

12.2 文件的编码
:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
:set fenc或:set fileencoding，查看当前文件的编码。
在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。
让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置

12.3 文件格式
大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。

:e ++ff=dos filename, 让vim用dos格式打开这个文件。
:w ++ff=mac filename, 以mac格式存储这个文件。
:set ff，显示当前文件的格式。
在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。
13. 编程辅助
13.1 一些按键
gd: 跳转到局部变量的定义处；
gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；
g;: 上一个修改过的地方；
g,: 下一个修改过的地方；
[[: 跳转到上一个函数块开始，需要有单独一行的{。
]]: 跳转到下一个函数块开始，需要有单独一行的{。
[]: 跳转到上一个函数块结束，需要有单独一行的}。
][: 跳转到下一个函数块结束，需要有单独一行的}。
[{: 跳转到当前块开始处；
]}: 跳转到当前块结束处；
[/: 跳转到当前注释块开始处；
]/: 跳转到当前注释块结束处；
%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。
下面的括号匹配对编程很实用的。

ci', di', yi'：修改、剪切或复制'之间的内容。
ca', da', ya'：修改、剪切或复制'之间的内容，包含'。
ci", di", yi"：修改、剪切或复制"之间的内容。
ca", da", ya"：修改、剪切或复制"之间的内容，包含"。
ci(, di(, yi(：修改、剪切或复制()之间的内容。
ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。
ci[, di[, yi[：修改、剪切或复制[]之间的内容。
ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。
ci{, di{, yi{：修改、剪切或复制{}之间的内容。
ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。
ci<, di<, yi<：修改、剪切或复制<>之间的内容。
ca<, da<, ya<：修改、剪切或复制<>之间的内容，包含<>。
13.2 ctags
ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags
:set tags=path/tags -- 告诉ctags使用哪个tag文件
:tag xyz -- 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t
:stag xyz -- 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口
:ptag xyz -- 在预览窗口中打开xyz的定义，热键是C-w }。
:pclose -- 关闭预览窗口。热键是C-w z。
:pedit abc.h -- 在预览窗口中编辑abc.h
:psearch abc -- 搜索当前文件和当前文件include的文件，显示包含abc的行。
有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。

:[n]tnext -- 下一[n]个匹配。
:[n]tprev -- 上一[n]个匹配。
:tfirst -- 第一个匹配
:tlast -- 最后一个匹配
:tselect tagname -- 打开选择列表
tab键补齐

:tag xyz<tab> -- 补齐以xyz开头的tag名，继续按tab键，会显示其他的。
:tag /xyz<tab> -- 会用名字中含有xyz的tag名补全。
13.3 cscope
cscope -Rbq: 生成cscope.out文件
:cs add /path/to/cscope.out /your/work/dir
:cs find c func -- 查找func在哪些地方被调用
:cw -- 打开quickfix窗口查看结果
13.4 gtags
Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。

:Gtags funcname 定位到 funcname 的定义处。
:Gtags -r funcname 查询 funcname被引用的地方。
:Gtags -s symbol 定位 symbol 出现的地方。
:Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。
:Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。
:Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。
13.5 编译
vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。

如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.Java文件，你可以这样设置：

set makeprg=javac\ abc.java
然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：

:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#
%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。

13.6 快速修改窗口
其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)

:copen -- 打开快速修改窗口。
:cclose -- 关闭快速修改窗口。
快速修改窗口在make程序时非常有用，当make之后：

:cl -- 在快速修改窗口中列出错误。
:cn -- 定位到下一个错误。
:cp -- 定位到上一个错误。
:cr -- 定位到第一个错误。
13.7 自动补全
C-x C-s -- 拼写建议。
C-x C-v -- 补全vim选项和命令。
C-x C-l -- 整行补全。
C-x C-f -- 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。
C-x C-p 和C-x C-n -- 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。
C-x C-o -- 编程时可以补全关键字和函数名啊。
C-x C-i -- 根据头文件内关键字补全。
C-x C-d -- 补全宏定义。
C-x C-n -- 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。
当弹出补全菜单后：

C-p 向前切换成员；
C-n 向后切换成员；
C-e 退出下拉菜单，并退回到原来录入的文字；
C-y 退出下拉菜单，并接受当前选项。
13.8 多行缩进缩出
正常模式下，按两下>;光标所在行会缩进。
如果先按了n，再按两下>;，光标以下的n行会缩进。
对应的，按两下<;，光标所在行会缩出。
如果在编辑代码文件，可以用=进行调整。
在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。
或者n =，调整n行代码的缩排。
13.9 折叠
zf -- 创建折叠的命令，可以在一个可视区域上使用该命令；
zd -- 删除当前行的折叠；
zD -- 删除当前行的折叠；
zfap -- 折叠光标所在的段；
zo -- 打开折叠的文本；
zc -- 收起折叠；
za -- 打开/关闭当前折叠；
zr -- 打开嵌套的折行；
zm -- 收起嵌套的折行；
zR (zO) -- 打开所有折行；
zM (zC) -- 收起所有折行；
zj -- 跳到下一个折叠处；
zk -- 跳到上一个折叠处；
zi -- enable/disable fold;
14. 命令行
normal模式下按:进入命令行模式

14.1 命令行模式下的快捷键：
上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。
左右方向键：左/右移一个字符。
C-w： 向前删除一个单词。
C-h： 向前删除一个字符，等同于Backspace。
C-u： 从当前位置移动到命令行开头。
C-b： 移动到命令行开头。
C-e： 移动到命令行末尾。
Shift-Left： 左移一个单词。
Shift-Right： 右移一个单词。
@： 重复上一次的冒号命令。
q： 正常模式下，q然后按':'，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。
q/和q? 可以打开查找历史记录。
14.2 执行外部命令
:! cmd 执行外部命令。
:!! 执行上一次的外部命令。
:sh 调用shell，用exit返回vim。
:r !cmd 将命令的返回结果插入文件当前位置。
:m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。
15. 其它
15.1 工作目录
:pwd 显示vim的工作目录。
:cd path 改变vim的工作目录。
:set autochdir 可以让vim 根据编辑的文件自动切换工作目录。
15.2 一些快捷键（收集中）
K: 打开光标所在词的manpage。
*: 向下搜索光标所在词。
g*: 同上，但部分符合即可。
#: 向上搜索光标所在词。
g#: 同上，但部分符合即可。
g C-g: 统计全文或统计部分的字数。
15.3 在线帮助
:h(elp)或F1 打开总的帮助。
:help user-manual 打开用户手册。
命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。
:helptags somepath 为somepath中的文档生成索引。
:helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。
Ctrl+] 跳转到tag主题，Ctrl+t 跳回。
:ver 显示版本信息。
15.4 一些小功能
简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。

关闭窗口
  用命令："close".可以关闭当前窗口。实际上,任何退出文件编辑的命令":quit"和"ZZ"都会关闭窗口，但是用":close"可以阻止你关闭最后一个Vim，以免以意外地整个关闭了Vim。

关闭除当前窗口外的所有其他窗口
  用命令：":only",关闭除当前窗口外的所有其它窗口。如果这些窗口中有被修改过的，你会得到一个错误信息，同时那个窗口会被留下来。

为另一个文件分隔出一个窗口
  命令":split two.c"可以打开第二个窗口同时在新打开的窗口中开始编辑作为
参数的文件。如果要打开一个新窗口并开始编辑一个空的缓冲区，使用命令:":new"。

垂直分割
  用命令":vsplit或：:vsplit two.c"。同样有一个对应的":vnew"命令，用于垂直分隔窗口并在其中打开一个新的空缓冲区。

切换窗口
  CTRL-W h 到左边的窗口
  CTRL-W j 到下面的窗口
  CTRL-W k 到上面的窗口
  CTRL-W l 到右边的窗口
  CTRL-W t 到顶部窗口
  CTRL-W b 到底部窗口

针对所有窗口操作的命令
  ":qall"放弃所有操作并退出，":wall"保存所有，":wqall"保存所有并退出。

为每一个文件打开一个窗口
  使用"-o"选项可以让Vim为每一个文件打开一个窗口：
"vim -o one.txt two.txt three.txt"。

使用vimdiff查看不同
  "vimdiff main.c~ main.c",另一种进入diff模式的办法可以在Vim运行中操作。编辑文件"main.c"，然后打开另一个分隔窗口显示其不同:
  ":edit main.c"
  ":vertical diffpatch main.c.diff"。
页签
   命令":tabe(dit) thatfile"在一个窗口中打开"thatfile"，该窗口占据着整个的Vim显示区域。命令":tab split/new"结果是新建了一个拥有一个窗口的页签。以用"gt"命令在不同的页签间切换。

创建一个启动脚本



**启用vim功能**


vim的功能特性要比vi多得多，但大部分功能都没有缺省激活。为了启动更多的功能，你得创建一个vimerc文件。

1.开始编辑vimerc文件，这取决于你所使用的操作系统：

	:edit ~/.vimrc            这是linux系统所使用的命令

	:edit $VIM/_vimrc         这是window系统所使用的命令

2.接着导入vimrc范例文件：

	:read $VIMRUNTMIE/vimrc_example.vim

3.保存文件，命令为：
	:write
	
:sh   进入shell环境，使用exit退出，回到编辑器中。
:!cmd  运行命令cmd后，返回到编辑器中。